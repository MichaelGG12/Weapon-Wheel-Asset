//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/NewControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewControls"",
    ""maps"": [
        {
            ""name"": ""WeaponWheelMap"",
            ""id"": ""7aaf2217-1350-45a8-954f-4591024d0546"",
            ""actions"": [
                {
                    ""name"": ""OpenWeaponWheel"",
                    ""type"": ""Button"",
                    ""id"": ""b2ad8f6f-dd02-4df1-b05a-6a5a4c1d9d6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7032e61e-dbcb-4f86-82ee-f92d2daaa14c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a41e78f5-3278-4ec6-a98d-16e99b923d21"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenWeaponWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e454eeb-7796-4d57-8986-da99220b4089"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WeaponWheelMap
        m_WeaponWheelMap = asset.FindActionMap("WeaponWheelMap", throwIfNotFound: true);
        m_WeaponWheelMap_OpenWeaponWheel = m_WeaponWheelMap.FindAction("OpenWeaponWheel", throwIfNotFound: true);
        m_WeaponWheelMap_Shoot = m_WeaponWheelMap.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WeaponWheelMap
    private readonly InputActionMap m_WeaponWheelMap;
    private List<IWeaponWheelMapActions> m_WeaponWheelMapActionsCallbackInterfaces = new List<IWeaponWheelMapActions>();
    private readonly InputAction m_WeaponWheelMap_OpenWeaponWheel;
    private readonly InputAction m_WeaponWheelMap_Shoot;
    public struct WeaponWheelMapActions
    {
        private @NewControls m_Wrapper;
        public WeaponWheelMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenWeaponWheel => m_Wrapper.m_WeaponWheelMap_OpenWeaponWheel;
        public InputAction @Shoot => m_Wrapper.m_WeaponWheelMap_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_WeaponWheelMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponWheelMapActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponWheelMapActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponWheelMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponWheelMapActionsCallbackInterfaces.Add(instance);
            @OpenWeaponWheel.started += instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.performed += instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.canceled += instance.OnOpenWeaponWheel;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IWeaponWheelMapActions instance)
        {
            @OpenWeaponWheel.started -= instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.performed -= instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.canceled -= instance.OnOpenWeaponWheel;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IWeaponWheelMapActions instance)
        {
            if (m_Wrapper.m_WeaponWheelMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponWheelMapActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponWheelMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponWheelMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponWheelMapActions @WeaponWheelMap => new WeaponWheelMapActions(this);
    public interface IWeaponWheelMapActions
    {
        void OnOpenWeaponWheel(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
